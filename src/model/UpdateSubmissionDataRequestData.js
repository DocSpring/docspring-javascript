/**
 * DocSpring API
 * Use DocSpring's API to programmatically fill out PDF forms, convert HTML to PDFs, merge PDFs, or request legally binding e-signatures.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateSubmissionDataRequestData model module.
 * @module model/UpdateSubmissionDataRequestData
 * @version 3.0.0
 */
class UpdateSubmissionDataRequestData {
    /**
     * Constructs a new <code>UpdateSubmissionDataRequestData</code>.
     * @alias module:model/UpdateSubmissionDataRequestData
     */
    constructor() { 
        
        UpdateSubmissionDataRequestData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateSubmissionDataRequestData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateSubmissionDataRequestData} obj Optional instance to populate.
     * @return {module:model/UpdateSubmissionDataRequestData} The populated <code>UpdateSubmissionDataRequestData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateSubmissionDataRequestData();

            if (data.hasOwnProperty('auth_phone_number_hash')) {
                obj['auth_phone_number_hash'] = ApiClient.convertToType(data['auth_phone_number_hash'], 'String');
            }
            if (data.hasOwnProperty('auth_provider')) {
                obj['auth_provider'] = ApiClient.convertToType(data['auth_provider'], 'String');
            }
            if (data.hasOwnProperty('auth_second_factor_type')) {
                obj['auth_second_factor_type'] = ApiClient.convertToType(data['auth_second_factor_type'], 'String');
            }
            if (data.hasOwnProperty('auth_session_id_hash')) {
                obj['auth_session_id_hash'] = ApiClient.convertToType(data['auth_session_id_hash'], 'String');
            }
            if (data.hasOwnProperty('auth_session_started_at')) {
                obj['auth_session_started_at'] = ApiClient.convertToType(data['auth_session_started_at'], 'String');
            }
            if (data.hasOwnProperty('auth_type')) {
                obj['auth_type'] = ApiClient.convertToType(data['auth_type'], 'String');
            }
            if (data.hasOwnProperty('auth_user_id_hash')) {
                obj['auth_user_id_hash'] = ApiClient.convertToType(data['auth_user_id_hash'], 'String');
            }
            if (data.hasOwnProperty('auth_username_hash')) {
                obj['auth_username_hash'] = ApiClient.convertToType(data['auth_username_hash'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], ['String']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateSubmissionDataRequestData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateSubmissionDataRequestData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['auth_phone_number_hash'] && !(typeof data['auth_phone_number_hash'] === 'string' || data['auth_phone_number_hash'] instanceof String)) {
            throw new Error("Expected the field `auth_phone_number_hash` to be a primitive type in the JSON string but got " + data['auth_phone_number_hash']);
        }
        // ensure the json data is a string
        if (data['auth_provider'] && !(typeof data['auth_provider'] === 'string' || data['auth_provider'] instanceof String)) {
            throw new Error("Expected the field `auth_provider` to be a primitive type in the JSON string but got " + data['auth_provider']);
        }
        // ensure the json data is a string
        if (data['auth_second_factor_type'] && !(typeof data['auth_second_factor_type'] === 'string' || data['auth_second_factor_type'] instanceof String)) {
            throw new Error("Expected the field `auth_second_factor_type` to be a primitive type in the JSON string but got " + data['auth_second_factor_type']);
        }
        // ensure the json data is a string
        if (data['auth_session_id_hash'] && !(typeof data['auth_session_id_hash'] === 'string' || data['auth_session_id_hash'] instanceof String)) {
            throw new Error("Expected the field `auth_session_id_hash` to be a primitive type in the JSON string but got " + data['auth_session_id_hash']);
        }
        // ensure the json data is a string
        if (data['auth_session_started_at'] && !(typeof data['auth_session_started_at'] === 'string' || data['auth_session_started_at'] instanceof String)) {
            throw new Error("Expected the field `auth_session_started_at` to be a primitive type in the JSON string but got " + data['auth_session_started_at']);
        }
        // ensure the json data is a string
        if (data['auth_type'] && !(typeof data['auth_type'] === 'string' || data['auth_type'] instanceof String)) {
            throw new Error("Expected the field `auth_type` to be a primitive type in the JSON string but got " + data['auth_type']);
        }
        // ensure the json data is a string
        if (data['auth_user_id_hash'] && !(typeof data['auth_user_id_hash'] === 'string' || data['auth_user_id_hash'] instanceof String)) {
            throw new Error("Expected the field `auth_user_id_hash` to be a primitive type in the JSON string but got " + data['auth_user_id_hash']);
        }
        // ensure the json data is a string
        if (data['auth_username_hash'] && !(typeof data['auth_username_hash'] === 'string' || data['auth_username_hash'] instanceof String)) {
            throw new Error("Expected the field `auth_username_hash` to be a primitive type in the JSON string but got " + data['auth_username_hash']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['fields'])) {
            throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * @member {String} auth_phone_number_hash
 */
UpdateSubmissionDataRequestData.prototype['auth_phone_number_hash'] = undefined;

/**
 * @member {String} auth_provider
 */
UpdateSubmissionDataRequestData.prototype['auth_provider'] = undefined;

/**
 * @member {module:model/UpdateSubmissionDataRequestData.AuthSecondFactorTypeEnum} auth_second_factor_type
 */
UpdateSubmissionDataRequestData.prototype['auth_second_factor_type'] = undefined;

/**
 * @member {String} auth_session_id_hash
 */
UpdateSubmissionDataRequestData.prototype['auth_session_id_hash'] = undefined;

/**
 * @member {String} auth_session_started_at
 */
UpdateSubmissionDataRequestData.prototype['auth_session_started_at'] = undefined;

/**
 * @member {module:model/UpdateSubmissionDataRequestData.AuthTypeEnum} auth_type
 */
UpdateSubmissionDataRequestData.prototype['auth_type'] = undefined;

/**
 * @member {String} auth_user_id_hash
 */
UpdateSubmissionDataRequestData.prototype['auth_user_id_hash'] = undefined;

/**
 * @member {String} auth_username_hash
 */
UpdateSubmissionDataRequestData.prototype['auth_username_hash'] = undefined;

/**
 * @member {String} email
 */
UpdateSubmissionDataRequestData.prototype['email'] = undefined;

/**
 * @member {Array.<String>} fields
 */
UpdateSubmissionDataRequestData.prototype['fields'] = undefined;

/**
 * @member {Object} metadata
 */
UpdateSubmissionDataRequestData.prototype['metadata'] = undefined;

/**
 * @member {String} name
 */
UpdateSubmissionDataRequestData.prototype['name'] = undefined;

/**
 * @member {Number} order
 */
UpdateSubmissionDataRequestData.prototype['order'] = undefined;





/**
 * Allowed values for the <code>auth_second_factor_type</code> property.
 * @enum {String}
 * @readonly
 */
UpdateSubmissionDataRequestData['AuthSecondFactorTypeEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "phone_number"
     * @const
     */
    "phone_number": "phone_number",

    /**
     * value: "totp"
     * @const
     */
    "totp": "totp",

    /**
     * value: "mobile_push"
     * @const
     */
    "mobile_push": "mobile_push",

    /**
     * value: "security_key"
     * @const
     */
    "security_key": "security_key",

    /**
     * value: "fingerprint"
     * @const
     */
    "fingerprint": "fingerprint",

    /**
     * value: ""
     * @const
     */
    "empty": ""
};


/**
 * Allowed values for the <code>auth_type</code> property.
 * @enum {String}
 * @readonly
 */
UpdateSubmissionDataRequestData['AuthTypeEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "password"
     * @const
     */
    "password": "password",

    /**
     * value: "oauth"
     * @const
     */
    "oauth": "oauth",

    /**
     * value: "email_link"
     * @const
     */
    "email_link": "email_link",

    /**
     * value: "phone_number"
     * @const
     */
    "phone_number": "phone_number",

    /**
     * value: "ldap"
     * @const
     */
    "ldap": "ldap",

    /**
     * value: "saml"
     * @const
     */
    "saml": "saml"
};



export default UpdateSubmissionDataRequestData;

